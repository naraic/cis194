{-# LANGUAGE TypeSynonymInstances #-}

module Calc where
import ExprT
import Parser
import StackVM

class Expr a where
    lit :: Integer -> a
    add :: a -> a -> a
    mul :: a -> a -> a

instance Expr ExprT where
    lit = Lit
    add = Add 
    mul = Mul 

instance Expr Program where
    lit = PushI 
    add = Add 
    mul = Mul 

eval :: ExprT -> Integer
eval (Lit n) = n
eval (Add e1 e2) = (eval e1) + (eval e2)
eval (Mul e1 e2) = (eval e1) * (eval e2)

evalStr :: String -> Maybe Integer
evalStr = maybeEval . (parseExp Lit Add Mul)

maybeEval :: Maybe ExprT -> Maybe Integer
maybeEval Nothing = Nothing
maybeEval (Just e) = Just (eval e)

reify :: ExprT -> ExprT
reify = id

instance Expr Bool where
    lit n 
        | n <= 0 = False
        | otherwise = True
    add = (||)
    mul = (&&)

instance Expr Integer where
    lit = id
    add = (+)
    mul = (*)

newtype MinMax = MinMax Integer deriving (Eq, Show)
instance Expr MinMax where
    lit = MinMax 
    add (MinMax x) (MinMax y) = MinMax (max x y)
    mul (MinMax x) (MinMax y) = MinMax (min x y)

newtype Mod7 = Mod7 Integer deriving (Eq, Show)
instance Expr Mod7 where
    lit n = Mod7 (mod n 7)
    add (Mod7 x) (Mod7 y) = lit (x + y)
    mul (Mod7 x) (Mod7 y) = lit (x * y)

testExp :: Expr a => Maybe a
testExp = parseExp lit add mul "(3 * -4) +5"


